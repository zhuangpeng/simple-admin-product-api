// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	base "github.com/agui-coder/simple-admin-product-api/api/internal/handler/base"
	brand "github.com/agui-coder/simple-admin-product-api/api/internal/handler/brand"
	category "github.com/agui-coder/simple-admin-product-api/api/internal/handler/category"
	comment "github.com/agui-coder/simple-admin-product-api/api/internal/handler/comment"
	property "github.com/agui-coder/simple-admin-product-api/api/internal/handler/property"
	propertyvalue "github.com/agui-coder/simple-admin-product-api/api/internal/handler/propertyvalue"
	spu "github.com/agui-coder/simple-admin-product-api/api/internal/handler/spu"
	"github.com/agui-coder/simple-admin-product-api/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/product/init/database",
				Handler: base.InitDatabaseHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/spu/create",
				Handler: spu.CreateSpuHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/spu/update",
				Handler: spu.UpdateSpuHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/spu/update-status",
				Handler: spu.UpdateStatusHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/spu/delete",
				Handler: spu.DeleteSpuHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/spu/detail",
				Handler: spu.GetSpuDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/spu/simple-list",
				Handler: spu.GetSpuSimpleListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/spu/list",
				Handler: spu.GetSpuListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/spu/page",
				Handler: spu.GetSpuPageHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/spu/count",
				Handler: spu.GetSpuCountHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/brand/create",
				Handler: brand.CreateBrandHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/brand/update",
				Handler: brand.UpdateBrandHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/brand/delete",
				Handler: brand.DeleteBrandHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/brand/:id",
				Handler: brand.GetBrandByIdHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/brand/list",
				Handler: brand.GetBrandListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/brand/page",
				Handler: brand.GetBrandPageHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/category/create",
				Handler: category.CreateCategoryHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/category/update",
				Handler: category.UpdateCategoryHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/category/delete",
				Handler: category.DeleteCategoryHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/category/list",
				Handler: category.GetCategoryListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/category/:id",
				Handler: category.GetCategoryByIdHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Authority},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/comment/create",
					Handler: comment.CreateCommentHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/property/create",
				Handler: property.CreatePropertyHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/property/update",
				Handler: property.UpdatePropertyHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/property/delete",
				Handler: property.DeletePropertyHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/property/list",
				Handler: property.GetPropertyListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/property",
				Handler: property.GetPropertyByIdHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/property/page",
				Handler: property.GetPropertyPageHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/property/get-value-list",
				Handler: property.GetPropertyAndValueListHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/property/value/create",
				Handler: propertyvalue.CreatePropertyValueHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/property/value/update",
				Handler: propertyvalue.UpdatePropertyValueHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/property/value/delete",
				Handler: propertyvalue.DeletePropertyValueHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/property/value/page",
				Handler: propertyvalue.GetPropertyValuePageHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/property/value",
				Handler: propertyvalue.GetPropertyValueByIdHandler(serverCtx),
			},
		},
	)
}
